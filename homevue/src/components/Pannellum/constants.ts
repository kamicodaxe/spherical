export const configs = {
    uiText: {
        loadButtonLabel: "Click to<br>Load<br>Panorama",
        loadingLabel: "Loading...",
        bylineLabel: "by %s",
        noPanoramaError: "No panorama image was specified.",
        fileAccessError: "The file %s could not be accessed.",
        malformedURLError: "There is something wrong with the panorama URL.",
        iOS8WebGLError:
            "Due to iOS 8's broken WebGL implementation, only progressive encoded JPEGs work for your device (this panorama uses standard encoding).",
        genericWebGLError:
            "Your browser does not have the necessary WebGL support to display this panorama.",
        textureSizeError:
            "This panorama is too big for your device! It's %spx wide, but your device only supports images up to %spx wide. Try another device. (If you're the author, try scaling down the image.)",
        unknownError: "Unknown error. Check developer console.",
    },
    styles: {
        width: "600px",
        height: "400px",
        background: "#000000",
    },
    equirectangularOptions: {
        haov: 360,
        vaov: 180,
        vOffset: 0,
        ignoreGPanoXMP: false,
    },
    panoramaConfigs: {
        children: [],
        width: "100%",
        height: "400px",
        image: "",
        haov: 360,
        vaov: 180,
        vOffset: 0,
        yaw: 0,
        pitch: 0,
        hfov: 100,
        minHfov: 50,
        maxHfov: 150,
        minPitch: -90,
        maxPitch: 90,
        minYaw: -180,
        maxYaw: 180,
        autoRotate: 0,
        compass: false,
        preview: "",
        previewTitle: "",
        previewAuthor: "",
        title: "",
        author: "",
        autoLoad: false,
        orientationOnByDefault: false,
        showZoomCtrl: true,
        doubleClickZoom: true,
        keyboardZoom: true,
        mouseZoom: true,
        draggable: true,
        disableKeyboardCtrl: false,
        showFullscreenCtrl: true,
        showControls: true,
        onLoad: () => { },
        onScenechange: () => { },
        onScenechangefadedone: () => { },
        onError: () => { },
        onErrorcleared: () => { },
        onMousedown: () => { },
        onMouseup: () => { },
        onTouchstart: () => { },
        onTouchend: () => { },
        hotspotDebug: false,
        onRender: null,
    },
};